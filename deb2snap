#!/bin/bash
# -*- Mode: sh; indent-tabs-mode: nil; tab-width: 4 -*-
#
# Copyright (C) 2015 Canonical, Ltd.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

ARCH=
DESCRIPTION="A custom command"
LOCAL_EXEC=false
DBUS=false
MIR=false
SHIP32=false
VERBOSE=false
XMIR=false
XMIREXEC=

while [[ $# > 0 ]]
do
key="$1"

case $key in
    --32)
    SHIP32=true
    PACKAGES="$PACKAGES libc6:i386"
    ;;
    --aa-template)
    AA_TEMPLATE="$2"
    shift
    ;;
    --arch)
    ARCH="$2"
    shift
    ;;
    --dbus)
    DBUS=true
    ;;
    --desc)
    DESCRIPTION="$2"
    shift
    ;;
    -d|--distro)
    DISTRO="$2"
    shift
    ;;
    --local-exec)
    LOCAL_EXEC=true
    ;;
    --mir)
    MIR=true
    ;;
    -n|--name)
    PACKAGE_NAME="$2"
    shift
    ;;
    --overlay)
    OVERLAY_DIR="$2"
    shift
    ;;
    -p|--package)
    PACKAGES="$PACKAGES $2"
    shift
    ;;
    --vendor)
    VENDOR="vendor: \"$2\""
    shift
    ;;
    --verbose)
    VERBOSE=true
    ;;
    -v|--version)
    VERSION="$2"
    shift
    ;;
    --xmir-binary)
    XMIR=true
    XMIREXEC="$2"
    shift
    ;;
    --xmir)
    XMIR=true
    ;;
    --dkms)
    DKMS="$2"
    shift
    ;;
    *)
    if [ -e $1 ]; then
        COMMAND=$(readlink -e $1)
    elif which $1 >/dev/null; then
        COMMAND=$(which $1)
    else
        echo "Unknown command $1"
        exit 1
    fi
    COMMANDS="$COMMANDS $COMMAND"
    ;;
esac
shift
done

function get_pkg_for_file()
{
    dpkg -S $@ 2>/dev/null | awk -F: '{print $1}'
}

function get_pkgs_from_ldd()
{
    FILES=$(ldd $1 | grep '=> /' | cut -d' ' -f3)
    get_pkg_for_file $FILES
}

if ! [ -e ./builddir ]; then
    echo "Looks like you haven't run make yet, doing it for you"
    make
fi

if [ -z "$COMMANDS" ]; then
    echo "You must provide a command to include in the snap"
    exit 1
fi

CMD_PACKAGE=
for COMMAND in $COMMANDS; do
    ONE_CMD_PACKAGE=$(get_pkg_for_file $COMMAND)
    if [ -n "$ONE_CMD_PACKAGE" ]; then
        PACKAGES="$PACKAGES $ONE_CMD_PACKAGE"
    else
        # just for tracking that we can't assume package name/version
        ONE_CMD_PACKAGE="UNKNOWN"
    fi
    if [ -z "$CMD_PACKAGE" ]; then
        CMD_PACKAGE="$ONE_CMD_PACKAGE"
    elif [ "$CMD_PACKAGE" != "$ONE_CMD_PACKAGE" ]; then
        CMD_PACKAGE="$CMD_PACKAGE $ONE_CMD_PACKAGE"
    fi
done
if $LOCAL_EXEC; then
    CMD_PACKAGE= # act like we didn't find anything
fi

COMMANDS_LEN=$(echo $CMD_PACKAGE | wc -w)
if [ $COMMANDS_LEN -gt 1 -o "$CMD_PACKAGE" = "UNKNOWN" ]; then
    CMD_PACKAGE=
fi

if [ -z "$ARCH" ]; then
    ARCH=$(dpkg-architecture -qDEB_HOST_ARCH)
fi

if [ -z "$PACKAGE_NAME" ]; then
    if [ -z "$CMD_PACKAGE" ]; then
        echo "No package name specified"
        exit 1
    fi
    PACKAGE_NAME=$(echo $CMD_PACKAGE | tr '~+:' '-') # ':' is not allowed
fi

if [ -z "$VERSION" ]; then
    if [ -z "$CMD_PACKAGE" ]; then
        echo "No version specified"
        exit 1
    fi
    VERSION=$(apt-cache policy $CMD_PACKAGE | grep '\*\*\*' | cut -d' ' -f3)
fi
VERSION=$(echo $VERSION | tr '~+:' '-') # ':' in paths will confuse LD_PRELOAD

if [ -z "$VENDOR" ]; then
    VENDOR="vendor: \"Unknown\""
fi

ROOT=$(mktemp -dt snap.XXXXXXXXXX)
mkdir -p $ROOT/bin $ROOT/meta

if $DBUS; then
    PACKAGES="dbus $PACKAGES"
    cp -p ./tools/dbus-daemon $ROOT/bin/_dbus-daemon
fi

if $XMIR; then
    if [ -n "$XMIREXEC" ]; then
        # Xmir 2.0!  Whole different way of calling it.
        # Just for ease, include more than we *need* by grabbing all of xorg
        PACKAGES="xorg $(get_pkgs_from_ldd $XMIREXEC) $PACKAGES"
        cp -p ./tools/xmir2-run $ROOT/bin/_xmir-run
        cp -p "$XMIREXEC" $ROOT/bin/_Xmir
    elif which Xmir >/dev/null; then
        # Xmir 2.0 again, and again include xorg for all its data packages
        PACKAGES="xorg xmir $PACKAGES"
        cp -p ./tools/xmir2-run $ROOT/bin/_xmir-run
        cp -p "$(which Xmir)" $ROOT/bin/_Xmir
    else
        # Old Xmir 1.0, needs an unconfined AA template
        PACKAGES="xorg xserver-xorg-xmir $PACKAGES"
        cp -p ./tools/xmir-run $ROOT/bin/_xmir-run
        if [ -n "AA_TEMPLATE" ]; then
            AA_TEMPLATE="unconfined"
            echo "Using an unconfined AppArmor template, because Xmir requires it"
        fi
    fi
fi

if [ -n "$DKMS" ]; then
    dkms_conf="`dpkg -L $DKMS | grep dkms.conf`"
    if [ $? == 1 ]; then
        echo "DKMS $DKMS cannot be found, please check the spelling."
        exit 1
    fi
    dkms_package_name=`grep PACKAGE_NAME $dkms_conf | awk -F'"' '{ print $2 }'`
    dkms_package_ver=`grep PACKAGE_VERSION $dkms_conf | awk -F'"' '{ print $2 }'`
    dkms_module_names=`grep BUILT_MODULE_NAME $dkms_conf | awk -F'"' '{ print $2 }'`

    # check if dkms has been installed
    dkms status $dkms_package_name -v $dkms_package_ver -k `uname -r` | grep installed > /dev/null
    if [ $? = 1 ]; then
        echo "DKMS $DKMS has not been installed, plasea use 'dkms install' to install it first."
        exit 1
    fi

    dkms_modules=""
    for m in $dkms_module_names; do
        kv=`uname -r`
        ko=`find /lib/modules/$kv/updates/dkms/ -name $m.ko`
        dkms_modules="$ko $modules"
    done
fi

# This grabs all the current system's ld.so.conf entries as reported by
# ldconfig and prepends our new root prefix to each of them.
# Unfortunately, we lose the ordering when we sort.  We also grab directories
# we end up not caring about (from other packages installed on the system).
# Is there a cleaner way to do this?
LDPATHS=$(ldconfig --print-cache | grep ' => /' | sed 's|^.* => \(/[^ ]*\)/[^/ ]*.*$|\1|g' | sort -r | uniq | tr '\n' : | sed "s=^=\$SNAP_APP_PATH/debs=;s=:/=:\$SNAP_APP_PATH/debs/=g")

mkdir -p $ROOT/lib
cp -p ./builddir/src/libsnappypreload.so $ROOT/lib/libsnappypreload.so
LDPRELOAD=\$SNAP_APP_PATH/lib/libsnappypreload.so

if $SHIP32; then
    mkdir -p $ROOT/lib32
    cp -p ./builddir/src/libsnappypreload32.so $ROOT/lib32/libsnappypreload.so
    LDPRELOAD=$LDPRELOAD:\$SNAP_APP_PATH/lib32/libsnappypreload.so
fi

for COMMAND in $COMMANDS; do
    SHORT_COMMAND=$(basename $COMMAND | tr '_' '-') # snappy doesn't allow underscores
    cp -p $COMMAND $ROOT/bin/$SHORT_COMMAND.real
    chmod a+x $ROOT/bin/$SHORT_COMMAND.real

    if [ "$(file -b --mime-encoding $COMMAND)" = "binary" ]; then
        PACKAGES="$PACKAGES $(get_pkgs_from_ldd $COMMAND)"
        RPATHS=$(objdump -p $COMMAND | grep RPATH | awk '{ print $2 }')
        if [ -n $RPATHS ]; then
            ORIGINAL_PATH=$(dirname $COMMAND)
            for RPATH in $(echo $RPATHS | tr : ' '); do
                RPATH=$(echo $RPATH | sed "s|\$ORIGIN|$ORIGINAL_PATH|")
                LDPATHS=$LDPATHS:\$SNAP_APP_PATH/debs$RPATH
            done
        fi
    fi

    CAPS=
    WRAPPER_COMMAND="\$SNAP_APP_PATH/bin/$SHORT_COMMAND.real"

    if $DBUS; then
        WRAPPER_COMMAND="dbus-run-session --dbus-daemon=\$SNAP_APP_PATH/bin/_dbus-daemon -- $WRAPPER_COMMAND"
    fi

    if $MIR; then
        WRAPPER_COMMAND="env QT_QPA_PLATFORM=ubuntumirclient /apps/mir/current/bin/mir-run $WRAPPER_COMMAND"
       FRAMEWORKS="${FRAMEWORKS}
 - mir"
        CAPS="${CAPS}
    - mir_client"
    fi

    if $XMIR; then
        WRAPPER_COMMAND="\$SNAP_APP_PATH/bin/_xmir-run $WRAPPER_COMMAND"
       FRAMEWORKS="${FRAMEWORKS}
 - mir"
        CAPS="${CAPS}
    - mir_client"
    fi

    sed "s|@COMMAND@|$WRAPPER_COMMAND|g;s|@LDPATHS@|$LDPATHS|g;s|@LDPRELOAD@|$LDPRELOAD|g" ./tools/wrapper.in > $ROOT/bin/$SHORT_COMMAND
    chmod a+x $ROOT/bin/$SHORT_COMMAND

    YAML_BINARIES="$YAML_BINARIES
 - name: bin/$SHORT_COMMAND"

    if [ -n "$CAPS" ]; then
        # networking is added by default if no caps are specified, so don't regress that
        YAML_BINARIES="$YAML_BINARIES
   caps:
    - networking$CAPS"
    fi

    if [ -n "$AA_TEMPLATE" ]; then
        YAML_BINARIES="$YAML_BINARIES
   security-template: $AA_TEMPLATE"
    fi
done

if [ -n "$FRAMEWORKS" ]; then
    YAML_FRAMEWORKS="frameworks:$FRAMEWORKS"
fi

cat > $ROOT/meta/package.yaml <<EOF
name: $PACKAGE_NAME
version: $VERSION
$VENDOR
architecture: $ARCH
$YAML_FRAMEWORKS
binaries:$YAML_BINARIES
EOF

if [ -n "$CMD_PACKAGE" ]; then
    apt-cache show $CMD_PACKAGE | grep '^Description' | head -n 1 | cut -d: -f2 | sed 's/^ //' > $ROOT/meta/readme.md
else
    echo "$DESCRIPTION" > $ROOT/meta/readme.md
fi

if [ -n "$PACKAGES" ]; then
    if [ -n "$DISTRO" ]; then
        DOWNLOAD_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/snappy-preload/manifests"
        DISTRO_FILEPART=${DISTRO//-}
        DISTRO_FILEPART=${DISTRO_FILEPART//\//-}
        MANIFEST_FILE="ubuntu-core-$DISTRO_FILEPART-core-$ARCH.manifest"
        if [ ! -r "$DOWNLOAD_DIR/$MANIFEST_FILE" ]; then
            mkdir -p "$DOWNLOAD_DIR"
            DISTRO_URLPART=$DISTRO
            if [ "${DISTRO##*/}" = "$DISTRO" ]; then # that means no release was specified
                DISTRO_URLPART=$DISTRO/release
            fi
            wget --quiet -N http://cdimage.ubuntu.com/ubuntu-core/releases/$DISTRO_URLPART/$MANIFEST_FILE -P "$DOWNLOAD_DIR"
        fi
        MANIFEST_ARG="--manifest $DOWNLOAD_DIR/$MANIFEST_FILE"
    fi
    if [ -z "$DKMS" ]; then
        ALL_PACKAGES="$(./tools/dep-tree $MANIFEST_ARG $PACKAGES)"
    else
        ALL_PACKAGES="$(./tools/dep-tree --ignore $DKMS $MANIFEST_ARG $PACKAGES)"
    fi

    if $MIR && echo $ALL_PACKAGES | grep -q libqt5gui; then
        PACKAGES="$PACKAGES qtubuntu-desktop"
        ALL_PACKAGES="$(./tools/dep-tree $MANIFEST_ARG $PACKAGES)"
    fi

    echo $ALL_PACKAGES | xargs ./tools/copy-deb $ROOT/debs

    if [ -n "$DKMS" ]; then
        for ko in $dkms_modules; do
            dest=$ROOT/`dirname $ko`
            mkdir -p $dest
            cp -p $ko $dest
        done
    fi
fi

./tools/fixes "$ROOT" $PACKAGE_NAME $VERSION

if [ -n "$OVERLAY_DIR" ]; then
    OVERLAY_TMP=$(mktemp -dt snap.XXXXXXXXXX)
    cp -dR --preserve=mode "$OVERLAY_DIR"/* "$OVERLAY_TMP"
    find "$OVERLAY_TMP" -type f -exec sh -c "file {} | grep text >/dev/null && sed -i 's/@PACKAGE@/$PACKAGE_NAME/g;s/@VERSION@/$VERSION/g;s/@ARCH@/$ARCH/g' {}" \;
    cp -rp "$OVERLAY_TMP"/* "$ROOT"
    rm -rf "$OVERLAY_TMP"
fi

if $VERBOSE; then
    snappy build $ROOT
else
    snappy build $ROOT | grep Generated
fi

rm -rf "$ROOT"
exit 0
